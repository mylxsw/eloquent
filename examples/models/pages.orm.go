// !!! DO NOT EDIT THIS FILE
package models

import (
	"database/sql"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

type Page struct {
	Id              int64
	Pid             int64
	Title           string
	Description     string
	Content         string
	ProjectId       int64
	UserId          int64
	Type            int
	Status          int
	LastModifiedUid int64
	HistoryId       int64
	SortLevel       int
	SyncUrl         string
	LastSyncAt      time.Time

	CreatedAt time.Time
	UpdatedAt time.Time
}

type pageWrap struct {
	Id              null.Int
	Pid             null.Int
	Title           null.String
	Description     null.String
	Content         null.String
	ProjectId       null.Int
	UserId          null.Int
	Type            null.Int
	Status          null.Int
	LastModifiedUid null.Int
	HistoryId       null.Int
	SortLevel       null.Int
	SyncUrl         null.String
	LastSyncAt      null.Time

	CreatedAt null.Time
	UpdatedAt null.Time
}

func (w pageWrap) ToPage() Page {
	return Page{
		Id:              w.Id.Int64,
		Pid:             w.Pid.Int64,
		Title:           w.Title.String,
		Description:     w.Description.String,
		Content:         w.Content.String,
		ProjectId:       w.ProjectId.Int64,
		UserId:          w.UserId.Int64,
		Type:            int(w.Type.Int64),
		Status:          int(w.Status.Int64),
		LastModifiedUid: w.LastModifiedUid.Int64,
		HistoryId:       w.HistoryId.Int64,
		SortLevel:       int(w.SortLevel.Int64),
		SyncUrl:         w.SyncUrl.String,
		LastSyncAt:      w.LastSyncAt.Time,

		CreatedAt: w.CreatedAt.Time,
		UpdatedAt: w.UpdatedAt.Time,
	}
}

type PageModel struct {
	db        *sql.DB
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string
}

type pageScope struct {
	name  string
	apply func(builder query.Condition)
}

var pageGlobalScopes = make([]pageScope, 0)
var pageLocalScopes = make([]pageScope, 0)

func NewPageModel(db *sql.DB) *PageModel {
	return &PageModel{
		db:                  db,
		tableName:           "wz_pages",
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
	}
}

func AddPageGlobalScope(name string, apply func(builder query.Condition)) {
	pageGlobalScopes = append(pageGlobalScopes, pageScope{name: name, apply: apply})
}

func AddPageLocalScope(name string, apply func(builder query.Condition)) {
	pageLocalScopes = append(pageLocalScopes, pageScope{name: name, apply: apply})
}

func (m *PageModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range pageGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range pageLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *PageModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *PageModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

func (m *PageModel) clone() *PageModel {
	return &PageModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
	}
}

func (m *PageModel) WithoutGlobalScopes(names ...string) *PageModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

func (m *PageModel) WithLocalScopes(names ...string) *PageModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

func (m *PageModel) Find(id int64) (Page, error) {
	return m.First(query.Builder().Where("id", "=", id))
}

func (m *PageModel) Get(builder query.SQLBuilder) ([]Page, error) {
	builder = builder.Table(m.tableName).Select("id", "created_at", "updated_at", "pid", "title", "description", "content", "project_id", "user_id", "type", "status", "last_modified_uid", "history_id", "sort_level", "sync_url", "last_sync_at")
	sqlStr, params := builder.AppendCondition(m.applyScope()).ResolveQuery()

	rows, err := m.db.Query(sqlStr, params...)
	if err != nil {
		return nil, err
	}

	pages := make([]Page, 0)
	for rows.Next() {
		var pageVar pageWrap
		if err := rows.Scan(&pageVar.Id, &pageVar.CreatedAt, &pageVar.UpdatedAt, &pageVar.Pid, &pageVar.Title, &pageVar.Description, &pageVar.Content, &pageVar.ProjectId, &pageVar.UserId, &pageVar.Type, &pageVar.Status, &pageVar.LastModifiedUid, &pageVar.HistoryId, &pageVar.SortLevel, &pageVar.SyncUrl, &pageVar.LastSyncAt); err != nil {
			return nil, err
		}

		pages = append(pages, pageVar.ToPage())
	}

	return pages, nil
}

func (m *PageModel) First(builder query.SQLBuilder) (Page, error) {
	res, err := m.Get(builder.Limit(1))
	if err != nil {
		return Page{}, err
	}

	if len(res) == 0 {
		return Page{}, sql.ErrNoRows
	}

	return res[0], nil
}

func (m *PageModel) Create(kv query.KV) (int64, error) {
	kv["created_at"] = time.Now()
	kv["updated_at"] = time.Now()

	sqlStr, params := query.Builder().Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.Exec(sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

func (m *PageModel) SaveAll(pages []Page) ([]int64, error) {
	ids := make([]int64, 0)
	for _, page := range pages {
		id, err := m.Save(page)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

func (m *PageModel) Save(page Page) (int64, error) {
	return m.Create(query.KV{
		"pid":               page.Pid,
		"title":             page.Title,
		"description":       page.Description,
		"content":           page.Content,
		"project_id":        page.ProjectId,
		"user_id":           page.UserId,
		"type":              page.Type,
		"status":            page.Status,
		"last_modified_uid": page.LastModifiedUid,
		"history_id":        page.HistoryId,
		"sort_level":        page.SortLevel,
		"sync_url":          page.SyncUrl,
		"last_sync_at":      page.LastSyncAt,
	})
}

func (m *PageModel) SaveOrUpdate(page Page) (id int64, updated bool, err error) {
	if page.Id > 0 {
		_, _err := m.UpdateById(page.Id, page)
		return page.Id, true, _err
	}

	_id, _err := m.Save(page)
	return _id, false, _err
}

func (m *PageModel) UpdateFields(builder query.SQLBuilder, kv query.KV) (int64, error) {

	kv["updated_at"] = time.Now()

	builder = builder.AppendCondition(m.applyScope())
	sqlStr, params := builder.Table(m.tableName).ResolveUpdate(kv)

	res, err := m.db.Exec(sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

func (m *PageModel) Update(builder query.SQLBuilder, page Page) (int64, error) {
	return m.UpdateFields(builder, query.KV{
		"pid":               page.Pid,
		"title":             page.Title,
		"description":       page.Description,
		"content":           page.Content,
		"project_id":        page.ProjectId,
		"user_id":           page.UserId,
		"type":              page.Type,
		"status":            page.Status,
		"last_modified_uid": page.LastModifiedUid,
		"history_id":        page.HistoryId,
		"sort_level":        page.SortLevel,
		"sync_url":          page.SyncUrl,
		"last_sync_at":      page.LastSyncAt,
	})
}

func (m *PageModel) UpdateById(id int64, page Page) (int64, error) {
	return m.Update(query.Builder().Where("id", "=", id), page)
}

func (m *PageModel) Delete(builder query.SQLBuilder) (int64, error) {

	sqlStr, params := builder.AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.Exec(sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

func (m *PageModel) DeleteById(id int64) (int64, error) {
	return m.Delete(query.Builder().Where("id", "=", id))
}
