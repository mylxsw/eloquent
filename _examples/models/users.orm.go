package models

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/coll"
	"github.com/mylxsw/eloquent"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

	// AddUserGlobalScope assign a global scope to a model for soft delete
	AddGlobalScopeForUser("soft_delete", func(builder query.Condition) {
		builder.WhereNull("deleted_at")
	})

}

// User is a User object
type User struct {
	original  *userOriginal
	userModel *UserModel

	Id            null.Int `json:"id"`
	Name          null.String
	Email         null.String `json:"email"`
	Password      null.String `json:"password" yaml:"password"`
	RoleId        null.Int
	EnterpriseId  null.Int
	RememberToken null.String `json:"remember_token" yaml:"remember_token"`
	CreatedAt     null.Time
	UpdatedAt     null.Time
	DeletedAt     null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *User) As(dst interface{}) error {
	return coll.CopyProperties(inst, dst)
}

// SetModel set model for User
func (inst *User) SetModel(userModel *UserModel) {
	inst.userModel = userModel
}

// userOriginal is an object which stores original User from database
type userOriginal struct {
	Id            null.Int
	Name          null.String
	Email         null.String
	Password      null.String
	RoleId        null.Int
	EnterpriseId  null.Int
	RememberToken null.String
	CreatedAt     null.Time
	UpdatedAt     null.Time
	DeletedAt     null.Time
}

// Staled identify whether the object has been modified
func (inst *User) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &userOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.Name != inst.original.Name {
			return true
		}
		if inst.Email != inst.original.Email {
			return true
		}
		if inst.Password != inst.original.Password {
			return true
		}
		if inst.RoleId != inst.original.RoleId {
			return true
		}
		if inst.EnterpriseId != inst.original.EnterpriseId {
			return true
		}
		if inst.RememberToken != inst.original.RememberToken {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
		if inst.DeletedAt != inst.original.DeletedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "name":
				if inst.Name != inst.original.Name {
					return true
				}
			case "email":
				if inst.Email != inst.original.Email {
					return true
				}
			case "password":
				if inst.Password != inst.original.Password {
					return true
				}
			case "role_id":
				if inst.RoleId != inst.original.RoleId {
					return true
				}
			case "enterprise_id":
				if inst.EnterpriseId != inst.original.EnterpriseId {
					return true
				}
			case "remember_token":
				if inst.RememberToken != inst.original.RememberToken {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			case "deleted_at":
				if inst.DeletedAt != inst.original.DeletedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *User) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &userOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.Name != inst.original.Name {
			kv["name"] = inst.Name
		}
		if inst.Email != inst.original.Email {
			kv["email"] = inst.Email
		}
		if inst.Password != inst.original.Password {
			kv["password"] = inst.Password
		}
		if inst.RoleId != inst.original.RoleId {
			kv["role_id"] = inst.RoleId
		}
		if inst.EnterpriseId != inst.original.EnterpriseId {
			kv["enterprise_id"] = inst.EnterpriseId
		}
		if inst.RememberToken != inst.original.RememberToken {
			kv["remember_token"] = inst.RememberToken
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
		if inst.DeletedAt != inst.original.DeletedAt {
			kv["deleted_at"] = inst.DeletedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "name":
				if inst.Name != inst.original.Name {
					kv["name"] = inst.Name
				}
			case "email":
				if inst.Email != inst.original.Email {
					kv["email"] = inst.Email
				}
			case "password":
				if inst.Password != inst.original.Password {
					kv["password"] = inst.Password
				}
			case "role_id":
				if inst.RoleId != inst.original.RoleId {
					kv["role_id"] = inst.RoleId
				}
			case "enterprise_id":
				if inst.EnterpriseId != inst.original.EnterpriseId {
					kv["enterprise_id"] = inst.EnterpriseId
				}
			case "remember_token":
				if inst.RememberToken != inst.original.RememberToken {
					kv["remember_token"] = inst.RememberToken
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			case "deleted_at":
				if inst.DeletedAt != inst.original.DeletedAt {
					kv["deleted_at"] = inst.DeletedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *User) Save(onlyFields ...string) error {
	if inst.userModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.userModel.SaveOrUpdate(*inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a User
func (inst *User) Delete() error {
	if inst.userModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.userModel.DeleteById(inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *User) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

func (inst *User) Role() *UserBelongsToRoleRel {
	return &UserBelongsToRoleRel{
		source:   inst,
		relModel: NewRoleModel(inst.userModel.GetDB()),
	}
}

type UserBelongsToRoleRel struct {
	source   *User
	relModel *RoleModel
}

func (rel *UserBelongsToRoleRel) Create(target Role) (int64, error) {
	targetId, err := rel.relModel.Save(target)
	if err != nil {
		return 0, err
	}

	target.Id = null.IntFrom(targetId)

	rel.source.RoleId = target.Id
	if err := rel.source.Save(); err != nil {
		return targetId, err
	}

	return targetId, nil
}

func (rel *UserBelongsToRoleRel) Exists(builders ...query.SQLBuilder) (bool, error) {
	builder := query.Builder().Where("id", rel.source.RoleId).Merge(builders...)

	return rel.relModel.Exists(builder)
}

func (rel *UserBelongsToRoleRel) First(builders ...query.SQLBuilder) (Role, error) {
	builder := query.Builder().Where("id", rel.source.RoleId).Limit(1).Merge(builders...)

	return rel.relModel.First(builder)
}

func (rel *UserBelongsToRoleRel) Associate(target Role) error {
	rel.source.RoleId = target.Id
	return rel.source.Save()
}

func (rel *UserBelongsToRoleRel) Dissociate() error {
	rel.source.RoleId = null.IntFrom(0)
	return rel.source.Save()
}

func (inst *User) Enterprise() *UserBelongsToEnterpriseRel {
	return &UserBelongsToEnterpriseRel{
		source:   inst,
		relModel: NewEnterpriseModel(inst.userModel.GetDB()),
	}
}

type UserBelongsToEnterpriseRel struct {
	source   *User
	relModel *EnterpriseModel
}

func (rel *UserBelongsToEnterpriseRel) Create(target Enterprise) (int64, error) {
	targetId, err := rel.relModel.Save(target)
	if err != nil {
		return 0, err
	}

	target.Id = null.IntFrom(targetId)

	rel.source.EnterpriseId = target.Id
	if err := rel.source.Save(); err != nil {
		return targetId, err
	}

	return targetId, nil
}

func (rel *UserBelongsToEnterpriseRel) Exists(builders ...query.SQLBuilder) (bool, error) {
	builder := query.Builder().Where("id", rel.source.EnterpriseId).Merge(builders...)

	return rel.relModel.Exists(builder)
}

func (rel *UserBelongsToEnterpriseRel) First(builders ...query.SQLBuilder) (Enterprise, error) {
	builder := query.Builder().Where("id", rel.source.EnterpriseId).Limit(1).Merge(builders...)

	return rel.relModel.First(builder)
}

func (rel *UserBelongsToEnterpriseRel) Associate(target Enterprise) error {
	rel.source.EnterpriseId = target.Id
	return rel.source.Save()
}

func (rel *UserBelongsToEnterpriseRel) Dissociate() error {
	rel.source.EnterpriseId = null.IntFrom(0)
	return rel.source.Save()
}

func (inst *User) UserExt() *UserHasOneUserExtRel {
	return &UserHasOneUserExtRel{
		source:   inst,
		relModel: NewUserExtModel(inst.userModel.GetDB()),
	}
}

type UserHasOneUserExtRel struct {
	source   *User
	relModel *UserExtModel
}

func (rel *UserHasOneUserExtRel) Exists(builders ...query.SQLBuilder) (bool, error) {
	builder := query.Builder().Where("user_id", rel.source.Id).Merge(builders...)

	return rel.relModel.Exists(builder)
}

func (rel *UserHasOneUserExtRel) First(builders ...query.SQLBuilder) (UserExt, error) {
	builder := query.Builder().Where("user_id", rel.source.Id).Limit(1).Merge(builders...)
	return rel.relModel.First(builder)
}

func (rel *UserHasOneUserExtRel) Create(target UserExt) (int64, error) {
	target.UserId = rel.source.Id
	return rel.relModel.Save(target)
}

func (rel *UserHasOneUserExtRel) Associate(target UserExt) error {
	_, err := rel.relModel.UpdateFields(
		query.KV{"user_id": rel.source.Id},
		query.Builder().Where("id", target.Id),
	)
	return err
}

func (rel *UserHasOneUserExtRel) Dissociate() error {
	_, err := rel.relModel.UpdateFields(
		query.KV{"user_id": nil},
		query.Builder().Where("user_id", rel.source.Id),
	)

	return err
}

func (inst *User) Organizations() *UserBelongsToManyOrganizationRel {
	return &UserBelongsToManyOrganizationRel{
		source:     inst,
		pivotTable: "user_organization_ref",
		relModel:   NewOrganizationModel(inst.userModel.GetDB()),
	}
}

type UserBelongsToManyOrganizationRel struct {
	source     *User
	pivotTable string
	relModel   *OrganizationModel
}

func (rel *UserBelongsToManyOrganizationRel) Get(builders ...query.SQLBuilder) ([]Organization, error) {
	res, err := eloquent.DB(rel.relModel.GetDB()).Query(
		query.Builder().Table(rel.pivotTable).Select("organization_id").Where("user_id", rel.source.Id),
		func(row eloquent.Scanner) (interface{}, error) {
			var k interface{}
			if err := row.Scan(&k); err != nil {
				return nil, err
			}

			return k, nil
		},
	)

	if err != nil {
		return nil, err
	}

	resArr, _ := res.ToArray()
	return rel.relModel.Get(query.Builder().Merge(builders...).WhereIn("id", resArr...))
}

func (rel *UserBelongsToManyOrganizationRel) Count(builders ...query.SQLBuilder) (int64, error) {
	res, err := eloquent.DB(rel.relModel.GetDB()).Query(
		query.Builder().Table(rel.pivotTable).Select(query.Raw("COUNT(1) as c")).Where("user_id", rel.source.Id),
		func(row eloquent.Scanner) (interface{}, error) {
			var k int64
			if err := row.Scan(&k); err != nil {
				return nil, err
			}

			return k, nil
		},
	)

	if err != nil {
		return 0, err
	}

	return res.Index(0).(int64), nil
}

func (rel *UserBelongsToManyOrganizationRel) Exists(builders ...query.SQLBuilder) (bool, error) {
	c, err := rel.Count(builders...)
	if err != nil {
		return false, err
	}

	return c > 0, nil
}

func (rel *UserBelongsToManyOrganizationRel) Attach(target Organization) error {
	_, err := eloquent.DB(rel.relModel.GetDB()).Insert(rel.pivotTable, query.KV{
		"organization_id": target.Id,
		"user_id":         rel.source.Id,
	})

	return err
}

func (rel *UserBelongsToManyOrganizationRel) Detach(target Organization) error {
	_, err := eloquent.DB(rel.relModel.GetDB()).
		Delete(eloquent.Build(rel.pivotTable).
			Where("organization_id", target.Id).
			Where("user_id", rel.source.Id))

	return err
}

func (rel *UserBelongsToManyOrganizationRel) DetachAll() error {
	_, err := eloquent.DB(rel.relModel.GetDB()).
		Delete(eloquent.Build(rel.pivotTable).
			Where("user_id", rel.source.Id))
	return err
}

func (rel *UserBelongsToManyOrganizationRel) Create(target Organization, builders ...query.SQLBuilder) (int64, error) {
	targetId, err := rel.relModel.Save(target)
	if err != nil {
		return 0, err
	}

	target.Id = null.IntFrom(targetId)

	err = rel.Attach(target)

	return targetId, err
}

type userScope struct {
	name  string
	apply func(builder query.Condition)
}

var userGlobalScopes = make([]userScope, 0)
var userLocalScopes = make([]userScope, 0)

// AddGlobalScopeForUser assign a global scope to a model
func AddGlobalScopeForUser(name string, apply func(builder query.Condition)) {
	userGlobalScopes = append(userGlobalScopes, userScope{name: name, apply: apply})
}

// AddLocalScopeForUser assign a local scope to a model
func AddLocalScopeForUser(name string, apply func(builder query.Condition)) {
	userLocalScopes = append(userLocalScopes, userScope{name: name, apply: apply})
}

func (m *UserModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range userGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range userLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *UserModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *UserModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type UserPlain struct {
	Id            int64
	Name          string
	Email         string
	Password      string
	RoleId        int64
	EnterpriseId  int64
	RememberToken string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	DeletedAt     time.Time
}

func (w UserPlain) ToUser(allows ...string) User {
	if len(allows) == 0 {
		return User{

			Id:            null.IntFrom(int64(w.Id)),
			Name:          null.StringFrom(w.Name),
			Email:         null.StringFrom(w.Email),
			Password:      null.StringFrom(w.Password),
			RoleId:        null.IntFrom(int64(w.RoleId)),
			EnterpriseId:  null.IntFrom(int64(w.EnterpriseId)),
			RememberToken: null.StringFrom(w.RememberToken),
			CreatedAt:     null.TimeFrom(w.CreatedAt),
			UpdatedAt:     null.TimeFrom(w.UpdatedAt),
			DeletedAt:     null.TimeFrom(w.DeletedAt),
		}
	}

	res := User{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "name":
			res.Name = null.StringFrom(w.Name)
		case "email":
			res.Email = null.StringFrom(w.Email)
		case "password":
			res.Password = null.StringFrom(w.Password)
		case "role_id":
			res.RoleId = null.IntFrom(int64(w.RoleId))
		case "enterprise_id":
			res.EnterpriseId = null.IntFrom(int64(w.EnterpriseId))
		case "remember_token":
			res.RememberToken = null.StringFrom(w.RememberToken)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		case "deleted_at":
			res.DeletedAt = null.TimeFrom(w.DeletedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w UserPlain) As(dst interface{}) error {
	return coll.CopyProperties(w, dst)
}

func (w *User) ToUserPlain() UserPlain {
	return UserPlain{

		Id:            w.Id.Int64,
		Name:          w.Name.String,
		Email:         w.Email.String,
		Password:      w.Password.String,
		RoleId:        w.RoleId.Int64,
		EnterpriseId:  w.EnterpriseId.Int64,
		RememberToken: w.RememberToken.String,
		CreatedAt:     w.CreatedAt.Time,
		UpdatedAt:     w.UpdatedAt.Time,
		DeletedAt:     w.DeletedAt.Time,
	}
}

// UserModel is a model which encapsulates the operations of the object
type UserModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var userTableName = "wz_user"

const (
	UserFieldId            = "id"
	UserFieldName          = "name"
	UserFieldEmail         = "email"
	UserFieldPassword      = "password"
	UserFieldRoleId        = "role_id"
	UserFieldEnterpriseId  = "enterprise_id"
	UserFieldRememberToken = "remember_token"
	UserFieldCreatedAt     = "created_at"
	UserFieldUpdatedAt     = "updated_at"
	UserFieldDeletedAt     = "deleted_at"
)

// UserFields return all fields in User model
func UserFields() []string {
	return []string{
		"id",
		"name",
		"email",
		"password",
		"role_id",
		"enterprise_id",
		"remember_token",
		"created_at",
		"updated_at",
		"deleted_at",
	}
}

func SetUserTable(tableName string) {
	userTableName = tableName
}

// NewUserModel create a UserModel
func NewUserModel(db query.Database) *UserModel {
	return &UserModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           userTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *UserModel) GetDB() query.Database {
	return m.db.GetDB()
}

// WithTrashed force soft deleted models to appear in a result set
func (m *UserModel) WithTrashed() *UserModel {
	return m.WithoutGlobalScopes("soft_delete")
}

func (m *UserModel) clone() *UserModel {
	return &UserModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *UserModel) WithoutGlobalScopes(names ...string) *UserModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *UserModel) WithLocalScopes(names ...string) *UserModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *UserModel) Condition(builder query.SQLBuilder) *UserModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *UserModel) Find(id int64) (User, error) {
	return m.First(m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *UserModel) Exists(builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *UserModel) Count(builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *UserModel) Paginate(page int64, perPage int64, builders ...query.SQLBuilder) ([]User, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *UserModel) Get(builders ...query.SQLBuilder) ([]User, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"name",
			"email",
			"password",
			"role_id",
			"enterprise_id",
			"remember_token",
			"created_at",
			"updated_at",
			"deleted_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "name":
			selectFields = append(selectFields, f)
		case "email":
			selectFields = append(selectFields, f)
		case "password":
			selectFields = append(selectFields, f)
		case "role_id":
			selectFields = append(selectFields, f)
		case "enterprise_id":
			selectFields = append(selectFields, f)
		case "remember_token":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		case "deleted_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*User, []interface{}) {
		var userVar User
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &userVar.Id)
			case "name":
				scanFields = append(scanFields, &userVar.Name)
			case "email":
				scanFields = append(scanFields, &userVar.Email)
			case "password":
				scanFields = append(scanFields, &userVar.Password)
			case "role_id":
				scanFields = append(scanFields, &userVar.RoleId)
			case "enterprise_id":
				scanFields = append(scanFields, &userVar.EnterpriseId)
			case "remember_token":
				scanFields = append(scanFields, &userVar.RememberToken)
			case "created_at":
				scanFields = append(scanFields, &userVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &userVar.UpdatedAt)
			case "deleted_at":
				scanFields = append(scanFields, &userVar.DeletedAt)
			}
		}

		return &userVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(context.Background(), sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	users := make([]User, 0)
	for rows.Next() {
		userReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		userReal.SetModel(m)
		users = append(users, *userReal)
	}

	return users, nil
}

// First return first result for given query
func (m *UserModel) First(builders ...query.SQLBuilder) (User, error) {
	res, err := m.Get(append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return User{}, err
	}

	if len(res) == 0 {
		return User{}, query.ErrNoResult
	}

	return res[0], nil
}

// Create save a new User to database
func (m *UserModel) Create(kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all Users to database
func (m *UserModel) SaveAll(users []User) ([]int64, error) {
	ids := make([]int64, 0)
	for _, user := range users {
		id, err := m.Save(user)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a User to database
func (m *UserModel) Save(user User, onlyFields ...string) (int64, error) {
	return m.Create(user.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new User or update it when it has a id > 0
func (m *UserModel) SaveOrUpdate(user User, onlyFields ...string) (id int64, updated bool, err error) {
	if user.Id.Int64 > 0 {
		_, _err := m.UpdateById(user.Id.Int64, user, onlyFields...)
		return user.Id.Int64, true, _err
	}

	_id, _err := m.Save(user, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *UserModel) UpdateFields(kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *UserModel) Update(user User, builders ...query.SQLBuilder) (int64, error) {
	return m.UpdateFields(user.StaledKV(), builders...)
}

// UpdatePart update a model for given query
func (m *UserModel) UpdatePart(user User, onlyFields ...string) (int64, error) {
	return m.UpdateFields(user.StaledKV(onlyFields...))
}

// UpdateById update a model by id
func (m *UserModel) UpdateById(id int64, user User, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(user.StaledKV(onlyFields...))
}

// ForceDelete permanently remove a soft deleted model from the database
func (m *UserModel) ForceDelete(builders ...query.SQLBuilder) (int64, error) {
	m2 := m.WithTrashed()

	sqlStr, params := m2.query.Merge(builders...).AppendCondition(m2.applyScope()).Table(m2.tableName).ResolveDelete()

	res, err := m2.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// ForceDeleteById permanently remove a soft deleted model from the database by id
func (m *UserModel) ForceDeleteById(id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).ForceDelete()
}

// Restore restore a soft deleted model into an active state
func (m *UserModel) Restore(builders ...query.SQLBuilder) (int64, error) {
	m2 := m.WithTrashed()
	return m2.UpdateFields(query.KV{
		"deleted_at": nil,
	}, builders...)
}

// RestoreById restore a soft deleted model into an active state by id
func (m *UserModel) RestoreById(id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Restore()
}

// Delete remove a model
func (m *UserModel) Delete(builders ...query.SQLBuilder) (int64, error) {

	return m.UpdateFields(query.KV{
		"deleted_at": time.Now(),
	}, builders...)

}

// DeleteById remove a model by id
func (m *UserModel) DeleteById(id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete()
}

// UserExt is a UserExt object
type UserExt struct {
	original     *userExtOriginal
	userExtModel *UserExtModel

	Address   null.String
	Qq        null.String
	Wechat    null.String
	UserId    null.Int
	Id        null.Int
	CreatedAt null.Time
	UpdatedAt null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *UserExt) As(dst interface{}) error {
	return coll.CopyProperties(inst, dst)
}

// SetModel set model for UserExt
func (inst *UserExt) SetModel(userExtModel *UserExtModel) {
	inst.userExtModel = userExtModel
}

// userExtOriginal is an object which stores original UserExt from database
type userExtOriginal struct {
	Address   null.String
	Qq        null.String
	Wechat    null.String
	UserId    null.Int
	Id        null.Int
	CreatedAt null.Time
	UpdatedAt null.Time
}

// Staled identify whether the object has been modified
func (inst *UserExt) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &userExtOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Address != inst.original.Address {
			return true
		}
		if inst.Qq != inst.original.Qq {
			return true
		}
		if inst.Wechat != inst.original.Wechat {
			return true
		}
		if inst.UserId != inst.original.UserId {
			return true
		}
		if inst.Id != inst.original.Id {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "address":
				if inst.Address != inst.original.Address {
					return true
				}
			case "qq":
				if inst.Qq != inst.original.Qq {
					return true
				}
			case "wechat":
				if inst.Wechat != inst.original.Wechat {
					return true
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					return true
				}
			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *UserExt) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &userExtOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Address != inst.original.Address {
			kv["address"] = inst.Address
		}
		if inst.Qq != inst.original.Qq {
			kv["qq"] = inst.Qq
		}
		if inst.Wechat != inst.original.Wechat {
			kv["wechat"] = inst.Wechat
		}
		if inst.UserId != inst.original.UserId {
			kv["user_id"] = inst.UserId
		}
		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "address":
				if inst.Address != inst.original.Address {
					kv["address"] = inst.Address
				}
			case "qq":
				if inst.Qq != inst.original.Qq {
					kv["qq"] = inst.Qq
				}
			case "wechat":
				if inst.Wechat != inst.original.Wechat {
					kv["wechat"] = inst.Wechat
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					kv["user_id"] = inst.UserId
				}
			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *UserExt) Save(onlyFields ...string) error {
	if inst.userExtModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.userExtModel.SaveOrUpdate(*inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a UserExt
func (inst *UserExt) Delete() error {
	if inst.userExtModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.userExtModel.DeleteById(inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *UserExt) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

func (inst *UserExt) User() *UserExtBelongsToUserRel {
	return &UserExtBelongsToUserRel{
		source:   inst,
		relModel: NewUserModel(inst.userExtModel.GetDB()),
	}
}

type UserExtBelongsToUserRel struct {
	source   *UserExt
	relModel *UserModel
}

func (rel *UserExtBelongsToUserRel) Create(target User) (int64, error) {
	targetId, err := rel.relModel.Save(target)
	if err != nil {
		return 0, err
	}

	target.Id = null.IntFrom(targetId)

	rel.source.UserId = target.Id
	if err := rel.source.Save(); err != nil {
		return targetId, err
	}

	return targetId, nil
}

func (rel *UserExtBelongsToUserRel) Exists(builders ...query.SQLBuilder) (bool, error) {
	builder := query.Builder().Where("id", rel.source.UserId).Merge(builders...)

	return rel.relModel.Exists(builder)
}

func (rel *UserExtBelongsToUserRel) First(builders ...query.SQLBuilder) (User, error) {
	builder := query.Builder().Where("id", rel.source.UserId).Limit(1).Merge(builders...)

	return rel.relModel.First(builder)
}

func (rel *UserExtBelongsToUserRel) Associate(target User) error {
	rel.source.UserId = target.Id
	return rel.source.Save()
}

func (rel *UserExtBelongsToUserRel) Dissociate() error {
	rel.source.UserId = null.IntFrom(0)
	return rel.source.Save()
}

type userExtScope struct {
	name  string
	apply func(builder query.Condition)
}

var userExtGlobalScopes = make([]userExtScope, 0)
var userExtLocalScopes = make([]userExtScope, 0)

// AddGlobalScopeForUserExt assign a global scope to a model
func AddGlobalScopeForUserExt(name string, apply func(builder query.Condition)) {
	userExtGlobalScopes = append(userExtGlobalScopes, userExtScope{name: name, apply: apply})
}

// AddLocalScopeForUserExt assign a local scope to a model
func AddLocalScopeForUserExt(name string, apply func(builder query.Condition)) {
	userExtLocalScopes = append(userExtLocalScopes, userExtScope{name: name, apply: apply})
}

func (m *UserExtModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range userExtGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range userExtLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *UserExtModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *UserExtModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type UserExtPlain struct {
	Address   string
	Qq        string
	Wechat    string
	UserId    int64
	Id        int64
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (w UserExtPlain) ToUserExt(allows ...string) UserExt {
	if len(allows) == 0 {
		return UserExt{

			Address:   null.StringFrom(w.Address),
			Qq:        null.StringFrom(w.Qq),
			Wechat:    null.StringFrom(w.Wechat),
			UserId:    null.IntFrom(int64(w.UserId)),
			Id:        null.IntFrom(int64(w.Id)),
			CreatedAt: null.TimeFrom(w.CreatedAt),
			UpdatedAt: null.TimeFrom(w.UpdatedAt),
		}
	}

	res := UserExt{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "address":
			res.Address = null.StringFrom(w.Address)
		case "qq":
			res.Qq = null.StringFrom(w.Qq)
		case "wechat":
			res.Wechat = null.StringFrom(w.Wechat)
		case "user_id":
			res.UserId = null.IntFrom(int64(w.UserId))
		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w UserExtPlain) As(dst interface{}) error {
	return coll.CopyProperties(w, dst)
}

func (w *UserExt) ToUserExtPlain() UserExtPlain {
	return UserExtPlain{

		Address:   w.Address.String,
		Qq:        w.Qq.String,
		Wechat:    w.Wechat.String,
		UserId:    w.UserId.Int64,
		Id:        w.Id.Int64,
		CreatedAt: w.CreatedAt.Time,
		UpdatedAt: w.UpdatedAt.Time,
	}
}

// UserExtModel is a model which encapsulates the operations of the object
type UserExtModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var userExtTableName = "wz_userext"

const (
	UserExtFieldAddress   = "address"
	UserExtFieldQq        = "qq"
	UserExtFieldWechat    = "wechat"
	UserExtFieldUserId    = "user_id"
	UserExtFieldId        = "id"
	UserExtFieldCreatedAt = "created_at"
	UserExtFieldUpdatedAt = "updated_at"
)

// UserExtFields return all fields in UserExt model
func UserExtFields() []string {
	return []string{
		"address",
		"qq",
		"wechat",
		"user_id",
		"id",
		"created_at",
		"updated_at",
	}
}

func SetUserExtTable(tableName string) {
	userExtTableName = tableName
}

// NewUserExtModel create a UserExtModel
func NewUserExtModel(db query.Database) *UserExtModel {
	return &UserExtModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           userExtTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *UserExtModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *UserExtModel) clone() *UserExtModel {
	return &UserExtModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *UserExtModel) WithoutGlobalScopes(names ...string) *UserExtModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *UserExtModel) WithLocalScopes(names ...string) *UserExtModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *UserExtModel) Condition(builder query.SQLBuilder) *UserExtModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *UserExtModel) Find(id int64) (UserExt, error) {
	return m.First(m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *UserExtModel) Exists(builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *UserExtModel) Count(builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *UserExtModel) Paginate(page int64, perPage int64, builders ...query.SQLBuilder) ([]UserExt, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *UserExtModel) Get(builders ...query.SQLBuilder) ([]UserExt, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"address",
			"qq",
			"wechat",
			"user_id",
			"id",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "address":
			selectFields = append(selectFields, f)
		case "qq":
			selectFields = append(selectFields, f)
		case "wechat":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "id":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*UserExt, []interface{}) {
		var userExtVar UserExt
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "address":
				scanFields = append(scanFields, &userExtVar.Address)
			case "qq":
				scanFields = append(scanFields, &userExtVar.Qq)
			case "wechat":
				scanFields = append(scanFields, &userExtVar.Wechat)
			case "user_id":
				scanFields = append(scanFields, &userExtVar.UserId)
			case "id":
				scanFields = append(scanFields, &userExtVar.Id)
			case "created_at":
				scanFields = append(scanFields, &userExtVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &userExtVar.UpdatedAt)
			}
		}

		return &userExtVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(context.Background(), sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	userExts := make([]UserExt, 0)
	for rows.Next() {
		userExtReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		userExtReal.SetModel(m)
		userExts = append(userExts, *userExtReal)
	}

	return userExts, nil
}

// First return first result for given query
func (m *UserExtModel) First(builders ...query.SQLBuilder) (UserExt, error) {
	res, err := m.Get(append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return UserExt{}, err
	}

	if len(res) == 0 {
		return UserExt{}, query.ErrNoResult
	}

	return res[0], nil
}

// Create save a new UserExt to database
func (m *UserExtModel) Create(kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all UserExts to database
func (m *UserExtModel) SaveAll(userExts []UserExt) ([]int64, error) {
	ids := make([]int64, 0)
	for _, userExt := range userExts {
		id, err := m.Save(userExt)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a UserExt to database
func (m *UserExtModel) Save(userExt UserExt, onlyFields ...string) (int64, error) {
	return m.Create(userExt.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new UserExt or update it when it has a id > 0
func (m *UserExtModel) SaveOrUpdate(userExt UserExt, onlyFields ...string) (id int64, updated bool, err error) {
	if userExt.Id.Int64 > 0 {
		_, _err := m.UpdateById(userExt.Id.Int64, userExt, onlyFields...)
		return userExt.Id.Int64, true, _err
	}

	_id, _err := m.Save(userExt, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *UserExtModel) UpdateFields(kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *UserExtModel) Update(userExt UserExt, builders ...query.SQLBuilder) (int64, error) {
	return m.UpdateFields(userExt.StaledKV(), builders...)
}

// UpdatePart update a model for given query
func (m *UserExtModel) UpdatePart(userExt UserExt, onlyFields ...string) (int64, error) {
	return m.UpdateFields(userExt.StaledKV(onlyFields...))
}

// UpdateById update a model by id
func (m *UserExtModel) UpdateById(id int64, userExt UserExt, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(userExt.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *UserExtModel) Delete(builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *UserExtModel) DeleteById(id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete()
}

// PasswordReset is a PasswordReset object
type PasswordReset struct {
	original           *passwordResetOriginal
	passwordResetModel *PasswordResetModel

	Email     null.String
	Token     null.String
	Id        null.Int
	CreatedAt null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *PasswordReset) As(dst interface{}) error {
	return coll.CopyProperties(inst, dst)
}

// SetModel set model for PasswordReset
func (inst *PasswordReset) SetModel(passwordResetModel *PasswordResetModel) {
	inst.passwordResetModel = passwordResetModel
}

// passwordResetOriginal is an object which stores original PasswordReset from database
type passwordResetOriginal struct {
	Email     null.String
	Token     null.String
	Id        null.Int
	CreatedAt null.Time
}

// Staled identify whether the object has been modified
func (inst *PasswordReset) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &passwordResetOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Email != inst.original.Email {
			return true
		}
		if inst.Token != inst.original.Token {
			return true
		}
		if inst.Id != inst.original.Id {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "email":
				if inst.Email != inst.original.Email {
					return true
				}
			case "token":
				if inst.Token != inst.original.Token {
					return true
				}
			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *PasswordReset) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &passwordResetOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Email != inst.original.Email {
			kv["email"] = inst.Email
		}
		if inst.Token != inst.original.Token {
			kv["token"] = inst.Token
		}
		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "email":
				if inst.Email != inst.original.Email {
					kv["email"] = inst.Email
				}
			case "token":
				if inst.Token != inst.original.Token {
					kv["token"] = inst.Token
				}
			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *PasswordReset) Save(onlyFields ...string) error {
	if inst.passwordResetModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.passwordResetModel.SaveOrUpdate(*inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a PasswordReset
func (inst *PasswordReset) Delete() error {
	if inst.passwordResetModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.passwordResetModel.DeleteById(inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *PasswordReset) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type passwordResetScope struct {
	name  string
	apply func(builder query.Condition)
}

var passwordResetGlobalScopes = make([]passwordResetScope, 0)
var passwordResetLocalScopes = make([]passwordResetScope, 0)

// AddGlobalScopeForPasswordReset assign a global scope to a model
func AddGlobalScopeForPasswordReset(name string, apply func(builder query.Condition)) {
	passwordResetGlobalScopes = append(passwordResetGlobalScopes, passwordResetScope{name: name, apply: apply})
}

// AddLocalScopeForPasswordReset assign a local scope to a model
func AddLocalScopeForPasswordReset(name string, apply func(builder query.Condition)) {
	passwordResetLocalScopes = append(passwordResetLocalScopes, passwordResetScope{name: name, apply: apply})
}

func (m *PasswordResetModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range passwordResetGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range passwordResetLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *PasswordResetModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *PasswordResetModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type PasswordResetPlain struct {
	Email     string
	Token     string
	Id        int64
	CreatedAt time.Time
}

func (w PasswordResetPlain) ToPasswordReset(allows ...string) PasswordReset {
	if len(allows) == 0 {
		return PasswordReset{

			Email:     null.StringFrom(w.Email),
			Token:     null.StringFrom(w.Token),
			Id:        null.IntFrom(int64(w.Id)),
			CreatedAt: null.TimeFrom(w.CreatedAt),
		}
	}

	res := PasswordReset{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "email":
			res.Email = null.StringFrom(w.Email)
		case "token":
			res.Token = null.StringFrom(w.Token)
		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w PasswordResetPlain) As(dst interface{}) error {
	return coll.CopyProperties(w, dst)
}

func (w *PasswordReset) ToPasswordResetPlain() PasswordResetPlain {
	return PasswordResetPlain{

		Email:     w.Email.String,
		Token:     w.Token.String,
		Id:        w.Id.Int64,
		CreatedAt: w.CreatedAt.Time,
	}
}

// PasswordResetModel is a model which encapsulates the operations of the object
type PasswordResetModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var passwordResetTableName = "wz_passwordreset"

const (
	PasswordResetFieldEmail     = "email"
	PasswordResetFieldToken     = "token"
	PasswordResetFieldId        = "id"
	PasswordResetFieldCreatedAt = "created_at"
)

// PasswordResetFields return all fields in PasswordReset model
func PasswordResetFields() []string {
	return []string{
		"email",
		"token",
		"id",
		"created_at",
	}
}

func SetPasswordResetTable(tableName string) {
	passwordResetTableName = tableName
}

// NewPasswordResetModel create a PasswordResetModel
func NewPasswordResetModel(db query.Database) *PasswordResetModel {
	return &PasswordResetModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           passwordResetTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *PasswordResetModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *PasswordResetModel) clone() *PasswordResetModel {
	return &PasswordResetModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *PasswordResetModel) WithoutGlobalScopes(names ...string) *PasswordResetModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *PasswordResetModel) WithLocalScopes(names ...string) *PasswordResetModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *PasswordResetModel) Condition(builder query.SQLBuilder) *PasswordResetModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *PasswordResetModel) Find(id int64) (PasswordReset, error) {
	return m.First(m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *PasswordResetModel) Exists(builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *PasswordResetModel) Count(builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *PasswordResetModel) Paginate(page int64, perPage int64, builders ...query.SQLBuilder) ([]PasswordReset, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *PasswordResetModel) Get(builders ...query.SQLBuilder) ([]PasswordReset, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"email",
			"token",
			"id",
			"created_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "email":
			selectFields = append(selectFields, f)
		case "token":
			selectFields = append(selectFields, f)
		case "id":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*PasswordReset, []interface{}) {
		var passwordResetVar PasswordReset
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "email":
				scanFields = append(scanFields, &passwordResetVar.Email)
			case "token":
				scanFields = append(scanFields, &passwordResetVar.Token)
			case "id":
				scanFields = append(scanFields, &passwordResetVar.Id)
			case "created_at":
				scanFields = append(scanFields, &passwordResetVar.CreatedAt)
			}
		}

		return &passwordResetVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(context.Background(), sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	passwordResets := make([]PasswordReset, 0)
	for rows.Next() {
		passwordResetReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		passwordResetReal.SetModel(m)
		passwordResets = append(passwordResets, *passwordResetReal)
	}

	return passwordResets, nil
}

// First return first result for given query
func (m *PasswordResetModel) First(builders ...query.SQLBuilder) (PasswordReset, error) {
	res, err := m.Get(append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return PasswordReset{}, err
	}

	if len(res) == 0 {
		return PasswordReset{}, query.ErrNoResult
	}

	return res[0], nil
}

// Create save a new PasswordReset to database
func (m *PasswordResetModel) Create(kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all PasswordResets to database
func (m *PasswordResetModel) SaveAll(passwordResets []PasswordReset) ([]int64, error) {
	ids := make([]int64, 0)
	for _, passwordReset := range passwordResets {
		id, err := m.Save(passwordReset)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a PasswordReset to database
func (m *PasswordResetModel) Save(passwordReset PasswordReset, onlyFields ...string) (int64, error) {
	return m.Create(passwordReset.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new PasswordReset or update it when it has a id > 0
func (m *PasswordResetModel) SaveOrUpdate(passwordReset PasswordReset, onlyFields ...string) (id int64, updated bool, err error) {
	if passwordReset.Id.Int64 > 0 {
		_, _err := m.UpdateById(passwordReset.Id.Int64, passwordReset, onlyFields...)
		return passwordReset.Id.Int64, true, _err
	}

	_id, _err := m.Save(passwordReset, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *PasswordResetModel) UpdateFields(kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *PasswordResetModel) Update(passwordReset PasswordReset, builders ...query.SQLBuilder) (int64, error) {
	return m.UpdateFields(passwordReset.StaledKV(), builders...)
}

// UpdatePart update a model for given query
func (m *PasswordResetModel) UpdatePart(passwordReset PasswordReset, onlyFields ...string) (int64, error) {
	return m.UpdateFields(passwordReset.StaledKV(onlyFields...))
}

// UpdateById update a model by id
func (m *PasswordResetModel) UpdateById(id int64, passwordReset PasswordReset, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(passwordReset.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *PasswordResetModel) Delete(builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *PasswordResetModel) DeleteById(id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete()
}
