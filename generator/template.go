package generator

var temp = `
// !!! DO NOT EDIT THIS FILE
package {{ .PackageName }} 

import (
	"database/sql"
	"gopkg.in/guregu/null.v3"
	"time"
	"github.com/mylxsw/eloquent/query"{{ range $i, $imp := .Imports }}
	"{{ $imp }}"{{ end }}
)

func init() {
{{ range $i, $m := .Models }}
{{ if $m.Definition.SoftDelete }}
	Add{{ camel $m.Name }}GlobalScope("soft_delete", func(builder query.Condition) {
		builder.WhereNull("deleted_at")
	})
{{ end }}
{{ end }}
}

{{ range $i, $m := .Models }}
type {{ camel $m.Name }} struct { 
	Id int64{{ range $j, $f := $m.Definition.Fields }}
	{{ camel $f.Name }} {{ $f.Type }}{{ end }}
	{{ if not $m.Definition.WithoutCreateTime }}
	CreatedAt time.Time{{ end }}{{ if not $m.Definition.WithoutUpdateTime }}
	UpdatedAt time.Time{{ end }}{{ if $m.Definition.SoftDelete }}
	DeletedAt null.Time{{ end }}
}

type {{ lower_camel $m.Name }}Wrap struct { 
	Id null.Int{{ range $j, $f := $m.Definition.Fields }}	
	{{ camel $f.Name }} {{ wrap_type $f.Type }}{{ end }}
	{{ if not $m.Definition.WithoutCreateTime }}
	CreatedAt null.Time{{ end }}{{ if not $m.Definition.WithoutUpdateTime }}
	UpdatedAt null.Time{{ end }}{{ if $m.Definition.SoftDelete }}
	DeletedAt null.Time{{ end }}
}

func (w {{ lower_camel $m.Name }}Wrap) To{{ camel $m.Name }} () {{ camel $m.Name }} {
	return {{ camel $m.Name }} {
		Id: w.Id.Int64,{{ range $j, $f := $m.Definition.Fields }}
		{{ camel $f.Name }}: {{ unwrap_type $f.Name $f.Type }},{{ end }}
		{{ if not $m.Definition.WithoutCreateTime }}
		CreatedAt: w.CreatedAt.Time,{{ end }}{{ if not $m.Definition.WithoutUpdateTime }}
		UpdatedAt: w.UpdatedAt.Time,{{ end }}{{ if $m.Definition.SoftDelete }}
		DeletedAt: w.DeletedAt,{{ end }}
	}
}

type {{ camel $m.Name }}Model struct {
	db *sql.DB
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes []string
}

type {{ lowercase $m.Name }}Scope struct {
	name  string
	apply func(builder query.Condition)
}

var {{ lowercase $m.Name }}GlobalScopes = make([]{{ lowercase $m.Name }}Scope, 0)
var {{ lowercase $m.Name }}LocalScopes = make([]{{ lowercase $m.Name }}Scope, 0)

func New{{ camel $m.Name }}Model (db *sql.DB) *{{ camel $m.Name }}Model {
	return &{{ camel $m.Name }}Model {
		db: db, 
		tableName: "{{ table $i }}",
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes: make([]string, 0),
	}
}

func Add{{ camel $m.Name }}GlobalScope(name string, apply func(builder query.Condition)) {
	{{ lowercase $m.Name }}GlobalScopes = append({{ lowercase $m.Name }}GlobalScopes, {{ lowercase $m.Name }}Scope{name: name, apply: apply})
}

func Add{{ camel $m.Name }}LocalScope(name string, apply func(builder query.Condition)) {
	{{ lowercase $m.Name }}LocalScopes = append({{ lowercase $m.Name }}LocalScopes, {{ lowercase $m.Name }}Scope{name: name, apply: apply})
}

func (m *{{ camel $m.Name }}Model) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range {{ lowercase $m.Name }}GlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range {{ lowercase $m.Name }}LocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *{{ camel $m.Name }}Model) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *{{ camel $m.Name }}Model) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}
	
	return true
}

{{ if $m.Definition.SoftDelete }}
func (m *{{ camel $m.Name }}Model) WithTrashed() *{{ camel $m.Name }}Model {
	return m.WithoutGlobalScopes("soft_delete")
}
{{ end }}

func (m *{{ camel $m.Name }}Model) clone() *{{ camel $m.Name }}Model {
	return &{{ camel $m.Name }}Model{
		db: m.db, 
		tableName: m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes: append([]string{}, m.includeLocalScopes...),
	}
}

func (m *{{ camel $m.Name }}Model) WithoutGlobalScopes(names ...string) *{{ camel $m.Name }}Model {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

func (m *{{ camel $m.Name }}Model) WithLocalScopes(names ...string) *{{ camel $m.Name }}Model {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

func (m *{{ camel $m.Name }}Model) Find(id int64) ({{ camel $m.Name }}, error) {
	return m.First(query.Builder().Where("id", "=", id))
}

func (m *{{ camel $m.Name }}Model) Get(builder query.SQLBuilder) ([]{{ camel $m.Name }}, error) {
	builder = builder.Table(m.tableName).Select("id"{{ if not $m.Definition.WithoutCreateTime }}, "created_at"{{ end }}{{ if not $m.Definition.WithoutUpdateTime }}, "updated_at"{{ end }}{{ range $j, $f := assignable_fields $m.Definition.Fields }}, "{{ snake $f.Name }}"{{ end }}{{ if $m.Definition.SoftDelete }}, "deleted_at"{{ end }})
	sqlStr, params := builder.AppendCondition(m.applyScope()).ResolveQuery()
	
	rows, err := m.db.Query(sqlStr, params...)
	if err != nil {
		return nil, err
	}

	{{ lowercase $m.Name }}s := make([]{{ camel $m.Name }}, 0)
	for rows.Next() {
		var {{ lowercase $m.Name }}Var {{ lower_camel $m.Name }}Wrap
		if err := rows.Scan(&{{ lowercase $m.Name }}Var.Id{{ if not $m.Definition.WithoutCreateTime }}, &{{ lowercase $m.Name }}Var.CreatedAt{{ end }}{{ if not $m.Definition.WithoutUpdateTime }}, &{{ lowercase $m.Name }}Var.UpdatedAt{{ end }}{{ range $j, $f := assignable_fields $m.Definition.Fields }}, &{{ lowercase $m.Name }}Var.{{ camel $f.Name }}{{ end }}{{ if $m.Definition.SoftDelete }}, &{{ lowercase $m.Name }}Var.DeletedAt{{ end }}); err != nil {
			return nil, err
		}

		{{ lowercase $m.Name }}s = append({{ lowercase $m.Name }}s, {{ lowercase $m.Name }}Var.To{{ camel $m.Name }}())
	}

	return {{ lowercase $m.Name }}s, nil
}

func (m *{{ camel $m.Name }}Model) First(builder query.SQLBuilder) ({{ camel $m.Name }}, error) {
	res, err := m.Get(builder.Limit(1))
	if err != nil {
		return {{ camel $m.Name }}{}, err 
	}

	if len(res) == 0 {
		return {{ camel $m.Name }}{}, sql.ErrNoRows
	}

	return res[0], nil
}

func (m *{{ camel $m.Name }}Model) Create(kv query.KV) (int64, error) {
	{{ if not $m.Definition.WithoutCreateTime }}kv["created_at"] = time.Now(){{ end }}
	{{ if not $m.Definition.WithoutUpdateTime }}kv["updated_at"] = time.Now(){{ end }}

	sqlStr, params := query.Builder().Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.Exec(sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()	
}

func (m *{{ camel $m.Name }}Model) SaveAll({{ lowercase $m.Name }}s []{{ camel $m.Name }}) ([]int64, error) {
	ids := make([]int64, 0)
	for _, {{ lowercase $m.Name }} := range {{ lowercase $m.Name }}s {
		id, err := m.Save({{ lowercase $m.Name }})
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

func (m *{{ camel $m.Name }}Model) Save({{ lowercase $m.Name }} {{ camel $m.Name }}) (int64, error) {
	return m.Create(query.KV{ {{ range $j, $f := assignable_fields $m.Definition.Fields }}
		"{{ snake $f.Name }}": {{ lowercase $m.Name }}.{{ camel $f.Name }},{{ end }}
	})	
}

func (m *{{ camel $m.Name }}Model) SaveOrUpdate({{ lowercase $m.Name }} {{ camel $m.Name }}) (id int64, updated bool, err error) {
	if {{ lowercase $m.Name }}.Id > 0 {
		_, _err := m.UpdateById({{ lowercase $m.Name }}.Id, {{ lowercase $m.Name }})
		return {{ lowercase $m.Name }}.Id, true, _err
	}

	_id, _err := m.Save({{ lowercase $m.Name }})
	return _id, false, _err
}

func (m *{{ camel $m.Name }}Model) UpdateFields(builder query.SQLBuilder, kv query.KV) (int64, error) {
	{{ if not $m.Definition.WithoutUpdateTime }}
	kv["updated_at"] = time.Now()
	{{ end }} 
	
	builder = builder.AppendCondition(m.applyScope())
	sqlStr, params := builder.Table(m.tableName).ResolveUpdate(kv)

	res, err := m.db.Exec(sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

func (m *{{ camel $m.Name }}Model) Update(builder query.SQLBuilder, {{ lowercase $m.Name }} {{ camel $m.Name }}) (int64, error) {
	return m.UpdateFields(builder, query.KV{ {{ range $j, $f := assignable_fields $m.Definition.Fields }}
		"{{ snake $f.Name }}": {{ lowercase $m.Name }}.{{ camel $f.Name }},{{ end }}
	})
}

func (m *{{ camel $m.Name }}Model) UpdateById(id int64, {{ lowercase $m.Name }} {{ camel $m.Name }}) (int64, error) {
	return m.Update(query.Builder().Where("id", "=", id), {{ lowercase $m.Name }})
}

{{ if $m.Definition.SoftDelete }}
func (m *{{ camel $m.Name }}Model) ForceDelete(builder query.SQLBuilder) (int64, error) {
	m2 := m.WithTrashed()

	sqlStr, params := builder.AppendCondition(m2.applyScope()).Table(m2.tableName).ResolveDelete()

	res, err := m2.db.Exec(sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

func (m *{{ camel $m.Name }}Model) ForceDeleteById(id int64) (int64, error) {
	return m.ForceDelete(query.Builder().Where("id", "=", id))
}

func (m *{{ camel $m.Name }}Model) Restore(builder query.SQLBuilder) (int64, error) {
	m2 := m.WithTrashed()
	return m2.UpdateFields(builder, query.KV {
		"deleted_at": nil,
	})
}

func (m *{{ camel $m.Name }}Model) RestoreById(id int64) (int64, error) {
	return m.Restore(query.Builder().Where("id", "=", id))
}
{{ end }}

func (m *{{ camel $m.Name }}Model) Delete(builder query.SQLBuilder) (int64, error) {
	{{ if $m.Definition.SoftDelete }}
	return m.UpdateFields(builder, query.KV {
		"deleted_at": time.Now(),
	})
	{{ else }}
	sqlStr, params := builder.AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.Exec(sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
	{{ end }}
}

func (m *{{ camel $m.Name }}Model) DeleteById(id int64) (int64, error) {
	return m.Delete(query.Builder().Where("id", "=", id))
}

{{ end }}

`

func GetTemplate() string {
	return temp
}
